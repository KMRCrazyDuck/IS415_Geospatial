---
title: "In-class Exercise 6"
author: "Kwek Ming Rong"
date: "13 Februrary 2023"
date-modified: "`r Sys.Date()`"
format: html
execute:
  eval: true
  echo: true
  warning: false
editor: visual
---

# Installing and Loading the R packages

Three R packages will be used for this in class exercise, they are sf, sfdep and tidyverse.

```{r}
pacman::p_load(sf, sfdep, tidyverse, tmap)
```

# 1. The Data

For the purpose of this in class exercise, the Hunan data sets will be used. There are two data sets in this use case, they are

-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.

## 1.1 Importing the Geospatial Data

The code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.

```{r}
hunan <- st_read(dsn = "Data/Geospatial", 
                 layer = "Hunan")
```

## 1.2 Importing CSV file into environment

Next, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.

```{r}
hunan2012 <- read_csv("Data/Aspatial/Hunan_2012.csv")
```

## 1.3 Performing relational join

The code chunk below will be used to update the attribute table of hunanâ€™s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.

*In order to retain the geospatial properties, the left data frame must be the sf data.frame (i.e. hunan)*

```{r}
hunan_GDPPC <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

# 2. Plotting a Choropleth Map

```{r}
tmap_mode("plot")
tm_shape(hunan_GDPPC) +
  tm_fill("GDPPC",
          style = "quantile", 
          palette = "Blues",
          title = "GDPPC") +
  tm_layout(main.title = "Distribution of GDP per captial by district",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() + 
  tm_grid(alpha = 0.2)
```

## 2.1 Identify Area Neighbours

In the code chunk below st_cotiguity() is used to derive a contiguity neighbour list by using Queen's method.

Queen Contiguity Weight Matrix
```{r}
cn_queen <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         .before = 1)
```

In the code chunk below st_cotiguity() is used to derive a contiguity neighbour list by using Rook's method setting argument queen to FALSE.

Rook Contiguity Weight Matrix

```{r}
cn_rook <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         queen = FALSE,
         .before = 1)
```

## 2.2 Computing contiguity weights

Contiguity weights: Queen's method

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb),
         .before = 1)
```

Contiguity weights: Rook's method

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
  queen = FALSE,
  wt = st_weights(nb),
  .before = 1)
```